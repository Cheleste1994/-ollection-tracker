generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  email       String   @unique
  password    String
  role        Role
  status      Status
  collections Item[]
  profile     Profile?

  @@map("user")
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  firstName String
  lastName  String
  gender    String
  avatar    String
  about     String
  age       Int
  userId    String   @unique
  countryId String?
  country   Country? @relation(fields: [countryId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Item {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  image       String
  description String
  tags        Tag[]

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?

  status Status

  stringFields    StringField[]
  integerFields   IntegerField[]
  multilineFields MultilineField[]
  booleanFields   BooleanField[]
  dateFields      DateField[]

  @@map("item")
}

model Category {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @unique
  collections Item[]

  @@map("category")
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String

  item   Item?   @relation(fields: [itemId], references: [id], onDelete: SetNull)
  itemId String?

  @@map("tag")
}

model Country {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  isoCode   String
  name      String
  phonecode String
  flag      String
  currency  String
  latitude  String
  longitude String
  Profile   Profile[]
  timezones Timezone[]

  @@map("country")
}

model Timezone {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  zoneName      String
  gmtOffset     Int
  gmtOffsetName String
  abbreviation  String
  tzName        String
  countryId     String
  Country       Country  @relation(fields: [countryId], references: [id])

  @@map("timezone")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum Status {
  ACTIVE
  PAUSED
  VACATION
}

model StringField {
  id     String @id @default(uuid())
  name   String
  value  String
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String @map("item_id")
}

model IntegerField {
  id     String @id @default(uuid())
  name   String
  value  Int
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String @map("item_id")
}

model MultilineField {
  id     String @id @default(uuid())
  name   String
  value  String
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String @map("item_id")
}

model BooleanField {
  id     String  @id @default(uuid())
  name   String
  value  Boolean
  item   Item    @relation(fields: [itemId], references: [id])
  itemId String  @map("item_id")
}

model DateField {
  id     String   @id @default(uuid())
  name   String
  value  DateTime
  item   Item     @relation(fields: [itemId], references: [id])
  itemId String   @map("item_id")
}
