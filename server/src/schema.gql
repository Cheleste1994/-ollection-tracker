# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  accessToken: String!
  user: User!
}

input AuthDto {
  email: String!
  password: String!
}

type Country {
  createdAt: Date!
  currency: String!
  flag: String!
  id: String!
  isoCode: String!
  latitude: String!
  longitude: String!
  name: String!
  phonecode: String!
  timezones: [Timezone!]!
  updatedAt: Date!
}

input CreateUserInput {
  """The email of the user"""
  email: String!

  """The password of the user"""
  password: String!
}

"""Date custom scalar type"""
scalar Date

type FileDownload {
  file: String!
  id: String!
}

type Mutation {
  createUser(dto: CreateUserInput!): User!
  deleteUser(usersIds: [String!]!): UserDelete!
  updateProfile(dto: UpdateProfileInput!): Profile!
  updateProfileByRole(dto: UpdateProfileInput!, userId: String!): Profile!
  updateUser(dto: UpdateUserInput!, userId: String!): User!
  uploadAvatar(file: Upload!, userId: String!): Profile!
}

type Profile {
  about: String!
  age: Int!
  avatar: String!
  countryId: String
  createdAt: Date!
  firstName: String!
  gender: String!
  id: String!
  lastName: String!
  updatedAt: Date!
  userId: String!
}

type ProfileByRole {
  currentRole: String!
  profile: ProfileWithUser!
}

type ProfileWithUser {
  about: String!
  age: Int!
  avatar: String!
  countryId: String
  createdAt: Date!
  email: String!
  firstName: String!
  gender: String!
  id: String!
  lastName: String!
  role: String!
  status: String!
  updatedAt: Date!
  userId: String!
}

type Query {
  countries: [Country!]!
  dbxAuth: String!
  filesDownload(arrId: [String!]!): [FileDownload!]!
  getNewTokens: Auth!
  login(dto: AuthDto!): Auth!
  logout: Boolean!
  profileById(userId: String!): Profile!
  profileByRole(userId: String!): ProfileByRole!
  profileByToken: ProfileWithUser!
  profiles: [ProfileWithUser!]!
  register(dto: AuthDto!): Auth!
  temporaryLink(id: String!): String!
  user(id: String!): User!
}

type Timezone {
  abbreviation: String!
  countryId: String!
  createdAt: Date!
  gmtOffset: Float!
  gmtOffsetName: String!
  id: String!
  tzName: String!
  updatedAt: Date!
  zoneName: String!
}

input UpdateProfileInput {
  about: String
  age: Int
  avatar: String
  countryId: String
  firstName: String
  gender: String
  lastName: String
  status: String
}

input UpdateUserInput {
  """The email of the user"""
  email: String

  """The password of the user"""
  password: String
  role: String
  status: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: Date!
  email: String!
  id: String!
  password: String!
  profile: Profile
  role: String!
  status: String!
  updatedAt: Date!
}

type UserDelete {
  isCurrent: Boolean!
  isDelete: Boolean!
}